services:
  automation:
    build:
      context: ./services/automation
      dockerfile: Dockerfile
    ports:
      - "8000:8000"            # Backend API
      - "8001:8001"            # Session Manager API  
      - "5901-6000:5901-6000"  # VNC ports (TigerVNC)
      - "7901-8000:7901-8000"  # noVNC web ports
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/rhobots_flow
      # VNC Configuration  
      - VNC_PUBLIC_HOST=${VNC_PUBLIC_HOST:-localhost}
      - VNC_HOST=localhost
      - DISPLAY_START=1
      - DISPLAY_END=100
      - VNC_PORT_START=5901
      - VNC_PORT_END=6000
      - WEB_PORT_START=7901
      - WEB_PORT_END=8000
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # MinIO Storage
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniosecret
      - MINIO_BUCKET_NAME=rhobots-flow
      - MINIO_PUBLIC_ENDPOINT=localhost:9900
      - MINIO_REGION=ap-south-1
      - STORAGE_BACKEND=minio
      # Session Management
      - SESSION_MANAGER_URL=http://localhost:8001
      - ENABLE_MULTI_SESSION=true
      - MAX_SESSIONS=100
      - SESSION_TIMEOUT=30
      - SESSION_TTL_HOURS=2
      # Host Resources
      - HOST_CPU_CORES=8
      - HOST_MEMORY_MB=16384
      - HOST_BANDWIDTH_Mbps=100
      # Application Settings
      - DEBUG=true
      - APP_ENV=development
      - TZ=America/New_York
    volumes:
      - automation_screenshots:/app/screenshots
      - automation_uploads:/app/uploads
    shm_size: "2gb"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 && nc -z localhost 8001"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  backend:
    build:
      dockerfile: ./backend/Dockerfile.dev
      context: .
    image: rhobots-flow-backend:latest
    volumes:
      - ./backend:/app
    command: ["dev"]
    depends_on: &backend-depends-on
      postgres:
        condition: service_healthy
    ports:
      - "8004:8000"
    environment: &backend-env
      DEBUG:  ${DEBUG:-true}
      APP_ENV: ${APP_ENV:-DEV}
      SECRET_KEY: ${SECRET_KEY:-mysecretkey}
      WEBHOOK_SECRET_KEY: ${WEBHOOK_SECRET_KEY:-mywebhooksecretkey}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*,}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost:3000,}
      HOST_NAME: ${HOST_NAME:-http://localhost:8004}
      RHOBOTS_AUTH_EP: ${RHOBOTS_AUTH_EP:-http://localhost:10000}
      DB_HOST: ${DB_HOST:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-rhobots_flow}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-http://minio:9000}
      AWS_S3_PUBLIC_ENDPOINT_URL: ${AWS_S3_PUBLIC_ENDPOINT_URL:-http://localhost:9900}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-miniosecret}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:-rhobots-flow}
      AWS_REGION: ${AWS_REGION:-ap-south-1}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-django-db}
      CELERY_CACHE_BACKEND: ${CELERY_CACHE_BACKEND:-django-cache}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    image: rhobots-flow-backend:latest
    command: ["celery"]
    environment:
      <<: *backend-env
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  beat:
    image: rhobots-flow-backend:latest
    command: ["beat"]
    environment:
      <<: *backend-env
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  web:
    image: rhobots-flow-web:latest
    build:
      dockerfile: ./web/Dockerfile.dev
      context: .
      args:
        - NODE_ENV=${NODE_ENV:-development}
        - NUXT_PUBLIC_AUTH_BASE_URL=${NUXT_PUBLIC_AUTH_BASE_URL:-http://localhost:10000}
        - NUXT_PUBLIC_APP_BASE_URL=${NUXT_PUBLIC_APP_BASE_URL:-http://localhost:3000}
        - NUXT_PUBLIC_API_SCHEME=${NUXT_PUBLIC_API_SCHEME:-http}
        - NUXT_PUBLIC_API_BASE_URL=${NUXT_PUBLIC_API_BASE_URL:-localhost:8004}
    volumes:
      - ./web:/app/web
    ports:
      - "3000:3000"
    restart: always

  auth:
    image: rhobotsai/documentlm-auth:latest
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "start" ]
    ports:
      - "10000:10000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-10000}
      BASE_DOMAIN: ${BASE_DOMAIN:-localhost}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-myauthsecret}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:10000}
      TRUSTED_ORIGINS: ${TRUSTED_ORIGINS:-http://localhost:3000}
      DATABASE_STRING: ${DATABASE_STRING:-postgres://postgres:postgres@postgres:5432/auth}
      REQUIRE_EMAIL_VERIFICATION: ${REQUIRE_EMAIL_VERIFICATION:-false}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET:-}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-http://minio:9000}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-miniosecret}
      AWS_REGION: ${AWS_REGION:-ap-south-1}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:-rhobots-flow}
      AWS_SENDER_EMAIL: ${AWS_SENDER_EMAIL:-}
      WEBHOOK_SECRET_KEY: ${WEBHOOK_SECRET_KEY:-mywebhooksecretkey}
      WEBHOOK_EP: ${WEBHOOK_EP:-http://backend:8000/api/auth/webhook/}
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:10000/api/auth/ok" ]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio
    command: minio server --address ':9000' --console-address ':9001' /data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9900:9000"
      - "9901:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  minio_init:
    image: minio/minio
    depends_on:
      minio:
        condition: service_healthy
    restart: "no"
    volumes:
      - minio_data:/data
    entrypoint: >
      /bin/sh -c "
        echo 'Starting MinIO initialization...';
        until (mc alias set myminio http://minio:9000 minio miniosecret 2>/dev/null) do echo 'Waiting for MinIO to be ready...' && sleep 2; done;
        echo 'MinIO connection established';
        if mc stat myminio/rhobots-flow >/dev/null 2>&1; then
          echo 'Bucket rhobots-flow already exists, skipping creation';
        else
          echo 'Creating bucket rhobots-flow...';
          mc mb myminio/rhobots-flow;
          echo 'Bucket created successfully';
        fi;
        echo 'Setting bucket permissions...';
        mc anonymous set download myminio/rhobots-flow;
        echo 'MinIO initialization completed successfully';
        exit 0;
      "

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/scripts:/scripts
volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  automation_screenshots:
    driver: local
  automation_uploads:
    driver: local
